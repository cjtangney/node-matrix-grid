{"version":3,"sources":["components/NodeMatrix/NodeMatrix.js","components/GameBoard/GameBoardCell/GameBoardCell.js","components/Cell/Cell.js","components/GameBoard/GameBoard.js","components/Modal/Modal.js","components/Modal/AddPlayerModal/AddPlayerModal.js","components/Player/Player.js","components/GameBoard/index.js","components/Panel/Panel.js","routes/Home/Home.js","serviceWorker.js","index.js","Routes.js"],"names":["NodeMatrix","height","width","Object","classCallCheck","this","data","initialize","_this","Array","from","fill","call","length","forEach","row","i","point","payload","x","y","GameBoardCell","possibleConstructorReturn","getPrototypeOf","Cell","active","neighbors","undefined","filter","neighbor","content","push","pop","shift","GameBoard","activeCell","addCells","gameBoardHeight","getHeight","gameBoardWidth","getWidth","setNeighborPoints","_this2","_loop","getData","setNeighbors","Modal","props","id","event","modal","target","style","visibility","display","modalId","document","getElementById","stopPropagation","Component","defaultProps","AddPlayerModal","hideModalById","bind","assertThisInitialized","react_default","a","createElement","getId","className","role","onClick","hideModalOnBackdropClick","stopEventBubble","htmlFor","type","name","justifyContent","addNewPlayer","COLORS","1","2","3","4","5","6","7","8","9","10","freeze","Player","playerData","currentLocation","color","Math","ceil","random","moveSpeed","availableMoves","calculateMoves","calculatedMoves","startingPoint","forwardPoint","backwardPoint","move","state","CELL_SIZE","canvasHeight","boardY","ADD_PLAYER_MODAL","canvasWidth","Board","boardX","canvasContext","players","playerTurn","currentPlayer","showAddPlayerModal","clearPrevActivePlayer","highlightPlayerMoves","onUpdate","_this$state","mapContext","getContext","setState","strokeStyle","w","h","beginPath","strokeRect","closePath","prevProps","prevPlayer","_this$props","newState","_this$state2","fillStyle","rect","coordinate","_this$state3","gameBoard","clearRect","player","drawPlayer","_this$state4","clearPoint","_this$state5","xInput","yInput","targetCell","Number","value","newPlayer","pushContents","playerNum","getActiveCell","setActiveCell","toggleActive","addPlayerToGame","_this3","_this$props2","handleClick","AddPlayerModal_AddPlayerModal","Panel","children","Home","activePlayer","nextTurn","getCurrentPlayer","tempPlayers","initializePlayers","includes","currentTurn","Panel_Panel","concat","src_components_GameBoard_GameBoard","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","react_router","exact","path","Home_Home","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.21543723.chunk.js","sourcesContent":["/**\n * Creates a NodeMatrix of fixed\n * height and width.\n * @param {number} height,\n * @param {number} width,\n * @prop {Array[Array[Cell]]} rows,\n */\nexport default class NodeMatrix {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n    this.data = [];\n    this.initialize();\n  }\n\n  /**\n   * Creates the data strcture using a number\n   * of fixed-length arrays\n   */\n  initialize() {\n    this.data = Array.from([].fill.call({\n      length: this.height,\n    }, 0));\n    this.data.forEach((row, i) => {\n      this.data[i] = Array.from([].fill.call({\n        length: this.width,\n      }, 0));\n    });\n  }\n\n  /**\n   * @return {number} _height\n   */\n  getHeight() {\n    return this.height;\n  }\n\n  /**\n   * @return {number} _width\n   */\n  getWidth() {\n    return this.width;\n  }\n\n  /**\n   * Inserts data into the NodeMatrix at the\n   * specified coordinate.\n   * @param {x, y} point\n   * @param {} payload\n   */\n  putData(point, payload) {\n    const { x, y } = point;\n    this.data[x][y] = payload;\n  }\n\n  /**\n   * Returns data from the NodeMatrix at the\n   * specified coordinate\n   * @param {x, y} point\n   * @return {}\n   */\n  getData(point) {\n    const { x, y } = point;\n    return this.data[y][x];\n  }\n}\n","import Cell from '../../Cell';\n\n/**\n * Represents a particular cell on the\n * GameBoard.\n * @param {number} x,\n * @param {number} y,\n * @prop {bool} active,\n * @prop {Array[GameBoardCell]} neighbors,\n */\nexport default class GameBoardCell extends Cell {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n","/**\n * Represents a particular cell in the\n * NodeMatrix.\n * @param {number} x,\n * @param {number} y,\n * @prop {bool} active,\n * @prop {Array[Cell]} neighbors,\n */\nexport default class Cell {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n    this.active = false;\n    this.neighbors = undefined;\n    this.data = [];\n  }\n\n  /**\n   * Finds the coordinates for each of the\n   * cell's neighbors within the NodeMatrix's\n   * boundaries.\n   * @param {Array[{number, number}]} neighbors,\n   * @param {number} height,\n   * @param {number} width,\n   */\n  setNeighborPoints(\n    neighbors,\n    height,\n    width,\n  ) {\n    this.neighbors = neighbors.filter(neighbor => (\n      (neighbor.x >= 0 && neighbor.y >= 0)\n      && (neighbor.x < width && neighbor.y < height)\n    ));\n  }\n\n  /**\n   * Updates the neighbors array\n   * @param {Array[Cell]} neighbors,\n   */\n  setNeighbors(neighbors) {\n    this.neighbors = neighbors;\n  }\n\n  /**\n   * Toggles the Cell active state\n   */\n  toggleActive() {\n    this.active = !this.active;\n  }\n\n  /**\n   * Pushes content into the Cell.\n   * @param {} content\n   */\n  pushContents(content) {\n    this.data.push(content);\n  }\n\n  /**\n   * Returns the last element from the\n   * Cell contents. This method\n   * will mutate the contents.\n   * @return {}\n   */\n  popContents() {\n    return (this.data.pop());\n  }\n\n  /**\n   * Returns the first element from the\n   * Cell contents. This method\n   * will mutate the contents.\n   * @return {}\n   */\n  shiftContents() {\n    return (this.data.shift());\n  }\n\n  /**\n   * Returns all of the Cell's\n   * contents. This method does not mutate\n   * the contents.\n   */\n  getContents() {\n    return (this.data);\n  }\n}\n","/* eslint-disable no-param-reassign */\nimport NodeMatrix from '../NodeMatrix';\nimport GameBoardCell from './GameBoardCell';\n\n/**\n * Extends NodeMatrix.\n * Add GameBoard properties, like activeCell\n * @param {number} height,\n * @param {number} width,\n * @prop {Array[Array[GameBoardCell]]} rows,\n * @prop {GameBoardCell} activeCell,\n */\nexport default class GameBoard extends NodeMatrix {\n  constructor(height, width) {\n    super(height, width);\n    this.activeCell = undefined;\n    this.addCells(); // .then(this.updateNeighbors());\n  }\n\n  /**\n   * Fills GameBoard.rows with GameBoardCell\n   * objects.\n   * @return {Promise}\n   */\n  async addCells() {\n    const gameBoardHeight = this.getHeight();\n    const gameBoardWidth = this.getWidth();\n    this.data.forEach((row, y) => {\n      for (let x = 0; x < row.length; x += 1) {\n        row[x] = new GameBoardCell(x, y);\n        row[x].setNeighborPoints([\n          { x: x - 1, y },\n          { x, y: y - 1 },\n          { x: x + 1, y },\n          { x, y: y + 1 },\n        ], gameBoardHeight, gameBoardWidth);\n      }\n    });\n  }\n\n  /**\n   * Updates all GameBoardCell neighbor coordinates\n   * to the correct GameBoardCell reference.\n   */\n  updateNeighbors() {\n    this.data.forEach((row, y) => {\n      for (let x = 0; x < row.length; x += 1) {\n        const neighbors = [];\n        row[y].neighbors.forEach((neighbor) => {\n          neighbors.push(this.getData(neighbor));\n        });\n        row[y].setNeighbors(neighbors);\n      }\n    });\n  }\n\n  /**\n   * Sets active cell on the GameBoard\n   * given a coordinate.\n   * @param {{number, number}} point,\n   */\n  setActiveCell(point) {\n    const { x, y } = point;\n    this.activeCell = this.data[y][x];\n  }\n\n  /**\n   * Returns the current active cell\n   * from the GameBoard.\n   * @return {GameBoardCell}\n   */\n  getActiveCell() {\n    return this.activeCell;\n  }\n}\n","/* eslint-disable class-methods-use-this */\nimport { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './style.css';\n\nexport default class Modal extends Component {\n  getId() {\n    const { id } = this.props;\n    return id;\n  }\n\n  hideModalOnBackdropClick(event) {\n    const modal = event.target;\n    modal.style.visibility = 'hidden';\n    modal.style.display = 'none';\n  }\n\n  hideModalById(modalId) {\n    const modal = document.getElementById(modalId);\n    modal.style.visibility = 'hidden';\n    modal.style.display = 'none';\n  }\n\n  stopEventBubble(event) {\n    event.stopPropagation();\n  }\n}\n\nModal.propTypes = {\n  id: PropTypes.string,\n};\n\nModal.defaultProps = {\n  id: '',\n};\n","/* eslint-disable jsx-quotes */\n/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport Modal from '../Modal';\n\nexport default class AddPlayerModal extends Modal {\n  constructor(props) {\n    super(props);\n\n    this.hideModalById = this.hideModalById.bind(this);\n  }\n\n  render() {\n    return (\n      <div\n        id={this.getId()}\n        className='modal-background'\n        role='presentation'\n        onClick={this.hideModalOnBackdropClick}\n      >\n        <div\n          className='modal'\n          role='presentation'\n          onClick={this.stopEventBubble}\n        >\n          <h2>New Player...</h2>\n          <br />\n          <div className='nes-field'>\n            <label htmlFor='player-start-x'>\n              X-coordinate\n              <input type='text' id='player-start-x' className='nes-input' />\n            </label>\n          </div>\n          <div className='nes-field'>\n            <label htmlFor='player-start-y'>\n              Y-coordinate\n              <input type='text' id='player-start-y' name='player-start-y' className='nes-input' />\n            </label>\n          </div>\n          <br />\n          <div style={{ display: 'flex', justifyContent: 'center' }}>\n            <button\n              type='button'\n              className='nes-btn is-success'\n              onClick={this.props.addNewPlayer}\n            >\n              Okay\n            </button>\n            <button\n              type='button'\n              className='nes-btn is-error'\n              onClick={() => { this.hideModalById(this.getId()); }}\n            >\n              Cancel\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","const COLORS = {\n  1: 'red',\n  2: 'orange',\n  3: 'yellow',\n  4: 'green',\n  5: 'purple',\n  6: 'fuchsia',\n  7: 'teal',\n  8: 'aqua',\n  9: 'blue',\n  10: 'lime',\n};\nObject.freeze(COLORS);\n\nexport default class Player {\n  constructor(playerData) {\n    // document the playerData object\n    this.currentLocation = playerData.currentLocation;\n    this.color = COLORS[Math.ceil(Math.random() * 10)];\n    this.moveSpeed = 3;\n    this.availableMoves = this.calculateMoves();\n  }\n\n  calculateMoves() {\n    const calculatedMoves = [];\n    const startingPoint = this.currentLocation;\n    const { moveSpeed } = this;\n    let forwardPoint = {};\n    let backwardPoint = {};\n\n    // calculates moves vertically\n    for (let i = 1; i <= moveSpeed; i += 1) {\n      forwardPoint = {\n        x: startingPoint.x,\n        y: startingPoint.y + i,\n      };\n      backwardPoint = {\n        x: startingPoint.x,\n        y: startingPoint.y - i,\n      };\n      calculatedMoves.push(forwardPoint);\n      calculatedMoves.push(backwardPoint);\n    }\n    // calculates moves horizontally\n    for (let i = 1; i <= moveSpeed; i += 1) {\n      forwardPoint = {\n        x: startingPoint.x + i,\n        y: startingPoint.y,\n      };\n      backwardPoint = {\n        x: startingPoint.x - i,\n        y: startingPoint.y,\n      };\n      calculatedMoves.push(forwardPoint);\n      calculatedMoves.push(backwardPoint);\n    }\n    return (calculatedMoves.filter(move => (\n      (move.x >= 0 && move.y >= 0)\n      && (move.x < 10 && move.y < 10)\n    )));\n  }\n}\n","/* eslint-disable react/forbid-prop-types */\n/* eslint-disable react/no-unused-state */\n/* eslint-disable jsx-quotes */\n/* eslint-disable react/jsx-filename-extension */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Board from './GameBoard';\nimport AddPlayerModal from '../Modal/AddPlayerModal';\nimport Player from '../Player';\n\nimport './GameBoard.css';\n\nexport default class GameBoard extends Component {\n  constructor(props) {\n    super(props);\n\n    // board dimensions. at the moment,\n    // only square boards are supported.\n    this.state = {\n      // BOARD_X: props.boardX,\n      // BOARD_Y: props.boardY,\n      CELL_SIZE: (props.canvasHeight / props.boardY),\n      ADD_PLAYER_MODAL: 'home-modal',\n      canvasWidth: props.canvasWidth,\n      canvasHeight: props.canvasHeight,\n      data: new Board(props.boardY, props.boardX),\n      canvasContext: undefined,\n      players: [],\n      playerTurn: undefined,\n      currentPlayer: undefined,\n    };\n\n    // handlers\n    this.showAddPlayerModal = this.showAddPlayerModal.bind(this);\n    this.addNewPlayer = this.addNewPlayer.bind(this);\n    this.clearPrevActivePlayer = this.clearPrevActivePlayer.bind(this);\n    this.highlightPlayerMoves = this.highlightPlayerMoves.bind(this);\n    this.onUpdate = this.onUpdate.bind(this);\n  }\n\n  componentDidMount() {\n    // Board variables\n    const { canvasWidth, canvasHeight, CELL_SIZE } = this.state;\n    const gameBoardCanvas = document.getElementById('map');\n    const gameBoardWidth = canvasWidth;\n    const gameBoardHeight = canvasHeight;\n    const mapContext = gameBoardCanvas.getContext('2d');\n\n    this.setState({\n      canvasContext: mapContext,\n    });\n\n    // Initial draw\n    mapContext.strokeStyle = '#575757';\n    for (let w = (CELL_SIZE / 2); w < gameBoardWidth; w += CELL_SIZE) {\n      for (let h = (CELL_SIZE / 2); h < gameBoardHeight; h += CELL_SIZE) {\n        mapContext.beginPath();\n        mapContext.strokeRect(\n          (w - (CELL_SIZE / 2)),\n          (h - (CELL_SIZE / 2)),\n          CELL_SIZE,\n          CELL_SIZE,\n        );\n        mapContext.closePath();\n      }\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const prevPlayer = prevProps.currentPlayer;\n    const { currentPlayer, playerTurn } = this.props;\n    if (prevPlayer !== currentPlayer) {\n      if (prevPlayer !== undefined) {\n        this.clearPrevActivePlayer(prevPlayer);\n      }\n      this.highlightPlayerMoves();\n      this.onUpdate({\n        currentPlayer,\n        playerTurn,\n      });\n    }\n  }\n\n  onUpdate(newState) {\n    const { currentPlayer, playerTurn } = newState;\n    this.setState({\n      currentPlayer,\n      playerTurn,\n    });\n  }\n\n  highlightPlayerMoves() {\n    const { currentPlayer } = this.props;\n    const { CELL_SIZE, canvasContext } = this.state;\n    canvasContext.fillStyle = 'rgba(0,125,255,0.25)';\n    currentPlayer.availableMoves.forEach((move) => {\n      canvasContext.beginPath();\n      canvasContext.rect(\n        (move.x * CELL_SIZE) + 1,\n        (move.y * CELL_SIZE) + 1,\n        CELL_SIZE - 2,\n        CELL_SIZE - 2,\n      );\n      canvasContext.fill();\n      canvasContext.closePath();\n    });\n  }\n\n  clearPoint(coordinate) {\n    const { CELL_SIZE, canvasContext, data } = this.state;\n    const gameBoard = data;\n    canvasContext.clearRect(\n      (coordinate.x * CELL_SIZE),\n      (coordinate.y * CELL_SIZE),\n      CELL_SIZE,\n      CELL_SIZE,\n    );\n    canvasContext.fillStyle = 'red';\n    canvasContext.beginPath();\n    canvasContext.strokeRect(\n      (coordinate.x * CELL_SIZE),\n      (coordinate.y * CELL_SIZE),\n      CELL_SIZE,\n      CELL_SIZE,\n    );\n    canvasContext.closePath();\n\n    // redraw a player if they were in a cell\n    if (gameBoard.getData(coordinate).data.length > 0) {\n      const player = gameBoard.getData(coordinate).data[0];\n      this.drawPlayer(player.currentLocation, player);\n    }\n  }\n\n  drawPlayer(coordinate, player) {\n    const { CELL_SIZE, canvasContext } = this.state;\n    canvasContext.fillStyle = player.color;\n    canvasContext.beginPath();\n    canvasContext.rect(\n      (coordinate.x * CELL_SIZE) + 1,\n      (coordinate.y * CELL_SIZE) + 1,\n      CELL_SIZE - 2,\n      CELL_SIZE - 2,\n    );\n    canvasContext.fill();\n    canvasContext.closePath();\n  }\n\n  clearPrevActivePlayer(prevPlayer) {\n    prevPlayer.availableMoves.forEach((coordinate) => {\n      this.clearPoint(coordinate);\n    });\n  }\n\n  showAddPlayerModal() {\n    const { ADD_PLAYER_MODAL } = this.state;\n    const modal = document.getElementById(ADD_PLAYER_MODAL);\n    modal.style.visibility = 'visible';\n    modal.style.display = 'block';\n  }\n\n  addNewPlayer() {\n    const { data, players, ADD_PLAYER_MODAL } = this.state;\n    const gameBoard = data;\n    const modal = document.getElementById(ADD_PLAYER_MODAL);\n    const xInput = document.getElementById('player-start-x');\n    const yInput = document.getElementById('player-start-y');\n    const targetCell = {\n      x: Number(xInput.value),\n      y: Number(yInput.value),\n    };\n    xInput.value = '';\n    yInput.value = '';\n    modal.style.visibility = 'hidden';\n    modal.style.display = 'none';\n    const newPlayer = new Player({\n      currentLocation: targetCell,\n    });\n    gameBoard.getData(targetCell).pushContents(newPlayer);\n    players.push({\n      playerNum: (players.length + 1),\n      player: newPlayer,\n    });\n    this.setState({\n      players,\n      data: gameBoard,\n    });\n    if (gameBoard.getActiveCell() === undefined) {\n      gameBoard.setActiveCell(gameBoard.getData(targetCell));\n      gameBoard.activeCell.toggleActive();\n    }\n    this.drawPlayer(targetCell, newPlayer);\n    const { addPlayerToGame } = this.props;\n    addPlayerToGame(newPlayer);\n\n    // debugging\n    // console.log(gameBoard);\n  }\n\n  render() {\n    const { canvasHeight, canvasWidth } = this.props;\n    const { ADD_PLAYER_MODAL } = this.state;\n    return (\n      <div>\n        <canvas\n          id='map'\n          height={canvasHeight}\n          width={canvasWidth}\n          onClick={this.handleClick}\n        />\n        <div style={{ display: 'flex', justifyContent: 'center' }}>\n          <button type='button' className='nes-btn is-primary' onClick={() => { this.showAddPlayerModal(); }}>Add Player</button>\n        </div>\n        <AddPlayerModal id={ADD_PLAYER_MODAL} addNewPlayer={this.addNewPlayer} />\n      </div>\n    );\n  }\n}\n\nGameBoard.propTypes = {\n  boardX: PropTypes.number.isRequired,\n  boardY: PropTypes.number.isRequired,\n  canvasWidth: PropTypes.number.isRequired,\n  canvasHeight: PropTypes.number.isRequired,\n  addPlayerToGame: PropTypes.func,\n  playerTurn: PropTypes.number,\n  currentPlayer: PropTypes.object,\n};\n\nGameBoard.defaultProps = {\n  addPlayerToGame: undefined,\n  playerTurn: undefined,\n  currentPlayer: undefined,\n};\n","/* eslint-disable react/jsx-filename-extension */\n/* eslint-disable jsx-quotes */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Panel.css';\n\nexport default function Panel(props) {\n  const { width, children } = props;\n  return (\n    <div\n      className='panel'\n      style={{ width }}\n    >\n      { children }\n    </div>\n  );\n}\n\nPanel.propTypes = {\n  width: PropTypes.number,\n  children: PropTypes.node.isRequired,\n};\n\nPanel.defaultProps = {\n  width: undefined,\n};\n","/* eslint-disable jsx-quotes */\n/* eslint-disable react/jsx-filename-extension */\nimport React, { Component } from 'react';\nimport GameBoard from '../../components/GameBoard';\nimport Panel from '../../components/Panel';\n\nimport './style.css';\n\nexport default class Home extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      players: [],\n      playerTurn: undefined,\n      activePlayer: undefined,\n    };\n\n    this.addPlayerToGame = this.addPlayerToGame.bind(this);\n    this.nextTurn = this.nextTurn.bind(this);\n    this.getCurrentPlayer = this.getCurrentPlayer.bind(this);\n  }\n\n  getCurrentPlayer() {\n    const { activePlayer } = this.state;\n    return (activePlayer);\n  }\n\n  initializePlayers() {\n    this.setState({\n      playerTurn: 1,\n    });\n  }\n\n  async addPlayerToGame(newPlayer) {\n    const { players } = this.state;\n    const tempPlayers = players;\n    if (tempPlayers.length === 0) {\n      this.initializePlayers();\n      this.setState({\n        activePlayer: newPlayer,\n      });\n    }\n    if (!tempPlayers.includes(newPlayer)) {\n      tempPlayers.push(newPlayer);\n      this.setState({\n        players: tempPlayers,\n      });\n    }\n  }\n\n  nextTurn() {\n    const { playerTurn, players } = this.state;\n    const currentTurn = playerTurn;\n    if (currentTurn === players.length) {\n      this.setState({\n        playerTurn: 1,\n        activePlayer: players[0],\n      });\n      return;\n    }\n    this.setState({\n      playerTurn: (currentTurn + 1),\n      activePlayer: players[currentTurn],\n    });\n  }\n\n  render() {\n    const { playerTurn } = this.state;\n    return (\n      <div>\n        <Panel>\n          <span className='nes-text'>\n            {`PLAYER TURN: ${playerTurn}`}\n          </span>\n          <br />\n          <br />\n          <br />\n          <button\n            id='next-turn-button'\n            type='button'\n            className='nes-btn is-primary'\n            onClick={this.nextTurn}\n          >\n            Next Turn\n          </button>\n        </Panel>\n        <GameBoard\n          boardX={10}\n          boardY={10}\n          canvasWidth={850}\n          canvasHeight={850}\n          addPlayerToGame={this.addPlayerToGame}\n          playerTurn={playerTurn}\n          currentPlayer={this.getCurrentPlayer()}\n        />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Routes from './Routes';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nReactDOM.render(<Routes />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/* eslint-disable jsx-quotes */\n/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport Home from './routes/Home/Home';\n\nexport default function Routes() {\n  return (\n    <Router>\n      <Route\n        exact\n        path='/'\n        render={() => <Home />}\n      />\n    </Router>\n  );\n}\n"],"sourceRoot":""}