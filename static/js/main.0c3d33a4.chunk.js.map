{"version":3,"sources":["components/NodeMatrix/NodeMatrix.js","components/GameBoard/GameBoardCell/GameBoardCell.js","components/Cell/Cell.js","components/GameBoard/GameBoard.js","components/Modal/AddPlayerModal/AddPlayerModal.js","components/Modal/Modal.js","components/Player/Player.js","components/GameBoard/index.js","components/Panel/Panel.js","routes/Home/Home.js","serviceWorker.js","index.js","Routes.js"],"names":["NodeMatrix","height","width","Object","classCallCheck","this","_height","_width","data","initialize","_this","Array","from","fill","call","length","forEach","row","i","point","payload","x","y","GameBoardCell","possibleConstructorReturn","getPrototypeOf","Cell","active","neighbors","undefined","filter","neighbor","content","push","pop","shift","GameBoard","_NodeMatrix","activeCell","addCells","then","updateNeighbors","inherits","createClass","key","value","_addCells","asyncToGenerator","regenerator_default","a","mark","_callee","gameBoardHeight","gameBoardWidth","wrap","_context","prev","next","getHeight","getWidth","setNeighborPoints","stop","apply","arguments","_this2","_loop","getData","setNeighbors","AddPlayerModal","props","hideModalById","bind","assertThisInitialized","react_default","createElement","id","getId","className","onClick","hideModalOnBackdropClick","stopEventBubble","htmlFor","type","style","display","justifyContent","addNewPlayer","event","modal","target","visibility","modalId","document","getElementById","stopPropagation","Component","COLORS","1","2","3","4","5","6","7","8","9","10","freeze","Player","playerData","currentLocation","color","Math","ceil","random","moveSpeed","availableMoves","calculateMoves","calculatedMoves","startingPoint","forwardPoint","backwardPoint","move","state","BOARD_X","boardX","BOARD_Y","boardY","CELL_SIZE","canvasHeight","ADD_PLAYER_MODAL","canvasWidth","Board","canvasContext","players","playerTurn","currentPlayer","showAddPlayerModal","clearPrevActivePlayer","highlightPlayerMoves","gameBoardCanvas","mapContext","getContext","setState","strokeStyle","w","h","beginPath","strokeRect","closePath","prevProps","prevPlayer","coordinate","clearRect","fillStyle","player","rect","clearPoint","gameBoard","currentPlayers","xInput","yInput","targetCell","Number","newPlayer","pushContents","playerNum","getActiveCell","setActiveCell","toggleActive","drawPlayer","addPlayerToGame","_this3","handleClick","AddPlayerModal_AddPlayerModal","Panel","children","Home","activePlayer","nextTurn","getCurrentPlayer","tempPlayers","initializePlayers","includes","currentTurn","Panel_Panel_Panel","src_components_GameBoard_GameBoard","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","react_router","exact","path","Home_Home","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0c3d33a4.chunk.js","sourcesContent":["/**\n * Creates a NodeMatrix of fixed \n * height and width.\n * @param {number} height,\n * @param {number} width,\n * @prop {Array[Array[Cell]]} rows,\n */\nexport default class NodeMatrix {\n  constructor(height, width) {\n    this._height = height;\n    this._width = width;\n    this.data = [];\n    this.initialize();\n  };\n\n  /**\n   * Creates the data strcture using a number \n   * of fixed-length arrays\n   */\n  initialize() {\n    this.data = Array.from([].fill.call({\n      length: this._height\n    }, 0));\n    this.data.forEach((row, i) => {\n      this.data[i] = Array.from([].fill.call({\n        length: this._width\n      }, 0));\n    });\n  };\n\n  /**\n   * @return {number} _height\n   */\n  getHeight() {\n    return this._height;\n  };\n\n  /**\n   * @return {number} _width\n   */\n  getWidth() {\n    return this._width;\n  };\n\n  /**\n   * Inserts data into the NodeMatrix at the \n   * specified coordinate.\n   * @param {x, y} point \n   * @param {} payload \n   */\n  putData(point, payload) {\n    const {x, y} = point;\n    this.data[x][y] = payload;\n  }\n\n  /**\n   * Returns data from the NodeMatrix at the\n   * specified coordinate\n   * @param {x, y} point \n   * @return {}\n   */\n  getData(point) {\n    const {x, y} = point;\n    return this.data[y][x];\n  }\n};\n","import Cell from '../../Cell';\n\n/**\n * Represents a particular cell on the\n * GameBoard.\n * @param {number} x,\n * @param {number} y,\n * @prop {bool} active,\n * @prop {Array[GameBoardCell]} neighbors,\n */\nexport default class GameBoardCell extends Cell{\n  constructor(x, y) {\n    super(x, y);\n  };  \n};\n","/**\n * Represents a particular cell in the\n * NodeMatrix.\n * @param {number} x,\n * @param {number} y,\n * @prop {bool} active,\n * @prop {Array[Cell]} neighbors,\n */\nexport default class Cell {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n    this.active = false;\n    this.neighbors = undefined;\n    this.data = [];\n  };\n\n  /**\n   * Finds the coordinates for each of the\n   * cell's neighbors within the NodeMatrix's\n   * boundaries. \n   * @param {Array[{number, number}]} neighbors,\n   * @param {number} height,\n   * @param {number} width,\n   */\n  setNeighborPoints(\n    neighbors, \n    height, \n    width) {\n    this.neighbors = neighbors.filter(neighbor => (\n        (neighbor.x >= 0 && neighbor.y >= 0) &&\n        (neighbor.x < width && neighbor.y < height)\n      )\n    );\n  };\n\n  /**\n   * Updates the neighbors array\n   * @param {Array[Cell]} neighbors,\n   */\n  setNeighbors(neighbors) {\n    this.neighbors = neighbors;\n  };\n\n  /**\n   * Toggles the Cell active state\n   */\n  toggleActive() {\n    this.active = this.active ? false : true;\n  };\n  \n  /**\n   * Pushes content into the Cell.\n   * @param {} content \n   */\n  pushContents(content) {\n    this.data.push(content);\n  }\n\n  /**\n   * Returns the last element from the\n   * Cell contents. This method\n   * will mutate the contents.\n   * @return {}\n   */\n  popContents() {\n    return(this.data.pop());\n  }\n\n  /**\n   * Returns the first element from the\n   * Cell contents. This method\n   * will mutate the contents.\n   * @return {}\n   */\n  shiftContents() {\n    return(this.data.shift());\n  }\n\n  /**\n   * Returns all of the Cell's\n   * contents. This method does not mutate\n   * the contents.\n   */\n  getContents() {\n    return(this.data);\n  }\n};\n","import NodeMatrix from '../NodeMatrix';\nimport GameBoardCell from './GameBoardCell';\n\n/**\n * Extends NodeMatrix.\n * Add GameBoard properties, like activeCell\n * @param {number} height,\n * @param {number} width,\n * @prop {Array[Array[GameBoardCell]]} rows,\n * @prop {GameBoardCell} activeCell,\n */\nexport class GameBoard extends NodeMatrix{\n  constructor(height, width) {\n    super(height, width);\n    this.activeCell = undefined;\n    this.addCells().then(this.updateNeighbors());\n  };\n\n  /**\n   * Fills GameBoard.rows with GameBoardCell\n   * objects.\n   * @return {Promise}\n \t */\n  async addCells() {\n    const gameBoardHeight = this.getHeight();\n    const gameBoardWidth = this.getWidth();\n    this.data.forEach((row, y) => {\n      for(let x = 0; x < row.length; x += 1) {\n        row[x] = new GameBoardCell(x, y);\n        row[x].setNeighborPoints([\n          {x: x-1, y: y},\n          {x: x, y: y-1},\n          {x: x+1, y: y},\n          {x: x, y: y+1},\n        ], gameBoardHeight, gameBoardWidth);\n      };\n    });\n  };\n\n  /**\n   * Updates all GameBoardCell neighbor coordinates\n   * to the correct GameBoardCell reference.\n \t */\n  updateNeighbors() {\n    this.data.forEach((row, y) => {\n      for(let x = 0; x < row.length; x+= 1) {\n        let neighbors = [];\n        row[y].neighbors.forEach(neighbor => {\n          neighbors.push(this.getData(neighbor));\n        });\n        row[y].setNeighbors(neighbors);\n      };\n    });\n  };\n\n  /**\n   * Sets active cell on the GameBoard\n   * given a coordinate.\n   * @param {{number, number}} point,\n \t */\n  setActiveCell(point) {\n    const {x, y} = point;\n    this.activeCell = this.data[y][x];\n  };\n\n  /**\n   * Returns the current active cell\n   * from the GameBoard.\n   * @return {GameBoardCell}\n \t */\n  getActiveCell() {\n    return this.activeCell;\n  };\n};\n","import React from 'react';\nimport Modal from '../Modal';\n\nexport default class AddPlayerModal extends Modal {\n  constructor(props) {\n    super(props);\n\n    this.hideModalById = this.hideModalById.bind(this);\n  }\n\n  render() {\n    return (\n      <div id={ this.getId() } className='modal-background' onClick={ \n          this.hideModalOnBackdropClick }>\n        <div className='modal' onClick={ this.stopEventBubble }>\n          <h2>New Player...</h2>\n          <br />\n          <div className='nes-field'>\n            <label htmlFor='player-start-x'>X-coordinate</label>\n            <input type='text' id='player-start-x' className='nes-input' />\n          </div>\n          <div className='nes-field'>\n            <label htmlFor='player-start-y'>Y-coordinate</label>\n            <input type='text' id='player-start-y' className='nes-input' />\n          </div>\n          <br />\n          <div style={{ 'display': 'flex', 'justifyContent': 'center' }}>\n            <button className='nes-btn is-success' onClick={ \n                this.props.addNewPlayer }>\n              Okay\n            </button>\n            <button className='nes-btn is-error' onClick={ \n                () => { this.hideModalById(this.getId()) } }>\n              Cancel\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import { Component } from 'react'\n\nimport './style.css';\n\nexport default class Modal extends Component {\n  getId() {\n    let id;\n    this.props.id === undefined ? id = ''  : id = this.props.id;\n    return id;\n  }\n\n  hideModalOnBackdropClick(event) {\n    const modal = event.target;\n    modal.style.visibility = 'hidden';\n    modal.style.display = 'none';\n  }\n\n  hideModalById(modalId) {\n    const modal = document.getElementById(modalId);\n    modal.style.visibility = 'hidden';\n    modal.style.display = 'none';\n  }\n\n  stopEventBubble(event) {\n    event.stopPropagation();\n  }\n}\n","const COLORS = {\n  1: 'red',\n  2: 'orange',\n  3: 'yellow',\n  4: 'green',\n  5: 'purple',\n  6: 'fuchsia',\n  7: 'teal',\n  8: 'aqua',\n  9: 'blue',\n  10: 'lime',\n};\nObject.freeze(COLORS);\n\nexport default class Player {\n  constructor(playerData) {\n    // document the playerData object\n    this.currentLocation = playerData.currentLocation;\n    this.color = COLORS[Math.ceil(Math.random() * 10)];\n    this.moveSpeed = 3;\n    this.availableMoves = this.calculateMoves();\n  };\n\n  calculateMoves() {\n    const calculatedMoves = [];\n    const startingPoint = this.currentLocation;\n    const moveSpeed = this.moveSpeed;\n    let forwardPoint = {},\n        backwardPoint = {};\n\n    // calculates moves vertically\n    for(let i = 1; i <= moveSpeed; i += 1) {\n      forwardPoint = {\n        x: startingPoint.x,\n        y: startingPoint.y + i,\n      };\n      backwardPoint = {\n        x: startingPoint.x,\n        y: startingPoint.y - i,\n      }\n      calculatedMoves.push(forwardPoint);\n      calculatedMoves.push(backwardPoint);\n    };\n    // calculates moves horizontally\n    for(let i = 1; i <= moveSpeed; i += 1) {\n      forwardPoint = {\n        x: startingPoint.x + i,\n        y: startingPoint.y,\n      };\n      backwardPoint = {\n        x: startingPoint.x - i,\n        y: startingPoint.y,\n      };\n      calculatedMoves.push(forwardPoint);\n      calculatedMoves.push(backwardPoint);\n    };\n    return(calculatedMoves.filter(move => (\n        (move.x >= 0 && move.y >= 0) && \n        (move.x < 10 && move.y < 10)\n      )\n    ));\n  };\n};\n","import React, { Component } from 'react';\nimport { GameBoard as Board } from './GameBoard';\nimport AddPlayerModal from '../Modal/AddPlayerModal';\nimport Player from '../Player';\n\nimport './GameBoard.css';\n\nexport default class GameBoard extends Component {\n  constructor(props) {\n    super(props);\n\n    // board dimensions. at the moment,\n    // only square boards are supported.\n    this.state = {\n      BOARD_X: props.boardX,\n      BOARD_Y: props.boardY,\n      CELL_SIZE: (props.canvasHeight / props.boardY),\n      ADD_PLAYER_MODAL: 'home-modal',\n      canvasWidth: props.canvasWidth,\n      canvasHeight: props.canvasHeight,\n      data: new Board(props.boardY, props.boardX),\n      canvasContext: undefined,\n      players: [],\n      playerTurn: undefined,\n      currentPlayer: undefined,\n    };\n\n    // handlers\n    this.showAddPlayerModal = this.showAddPlayerModal.bind(this);\n    this.addNewPlayer = this.addNewPlayer.bind(this);\n    this.clearPrevActivePlayer = this.clearPrevActivePlayer.bind(this);\n    this.highlightPlayerMoves = this.highlightPlayerMoves.bind(this);\n  }\n\n  componentDidMount() {\n    // Board variables\n    const gameBoardCanvas = document.getElementById('map');\n    const gameBoardWidth = this.state.canvasWidth;\n    const gameBoardHeight = this.state.canvasHeight;\n    const CELL_SIZE = this.state.CELL_SIZE;\n    const mapContext = gameBoardCanvas.getContext('2d');\n\n    this.setState({\n      canvasContext: mapContext,\n    });\n  \n    // Initial draw\n    mapContext.strokeStyle = '#575757';\n    for(let w = (CELL_SIZE / 2); w < gameBoardWidth; w += CELL_SIZE) {\n      for(let h = (CELL_SIZE / 2); h < gameBoardHeight; h += CELL_SIZE) {\n        mapContext.beginPath();\n        mapContext.strokeRect(\n          (w - (CELL_SIZE / 2)), \n          (h - (CELL_SIZE / 2)), \n          CELL_SIZE, \n          CELL_SIZE);\n        mapContext.closePath();\n      };\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const prevPlayer = prevProps.currentPlayer;\n    const currentPlayer = this.props.currentPlayer;\n    if(prevPlayer !== currentPlayer) {\n      if(prevPlayer !== undefined) {\n        this.clearPrevActivePlayer(prevPlayer);\n      }\n      this.highlightPlayerMoves();\n      this.setState({\n        currentPlayer: this.props.currentPlayer,\n        playerTurn: this.props.playerTurn,\n      });\n    }\n  }\n\n  clearPoint(coordinate) {\n    const CELL_SIZE = this.state.CELL_SIZE;\n    const mapContext = this.state.canvasContext;\n    mapContext.clearRect(\n      (coordinate.x * CELL_SIZE), \n      (coordinate.y * CELL_SIZE), \n      CELL_SIZE, \n      CELL_SIZE);\n    mapContext.fillStyle = 'red';    \n    mapContext.beginPath();\n    mapContext.strokeRect(\n      (coordinate.x * CELL_SIZE), \n      (coordinate.y * CELL_SIZE), \n      CELL_SIZE, \n      CELL_SIZE);\n    mapContext.closePath();\n  }\n\n  drawPlayer(coordinate, player) {\n    const CELL_SIZE = this.state.CELL_SIZE;\n    const mapContext = this.state.canvasContext;\n    mapContext.fillStyle = player.color;\n    mapContext.beginPath();\n    mapContext.rect(\n      (coordinate.x * CELL_SIZE) + 1, \n      (coordinate.y * CELL_SIZE) + 1, \n      CELL_SIZE - 2, \n      CELL_SIZE - 2);\n    mapContext.fill();\n    mapContext.closePath();\n  }\n\n  clearPrevActivePlayer(prevPlayer) {\n    prevPlayer.availableMoves.forEach(coordinate => {\n      this.clearPoint(coordinate);\n    });\n  }\n\n  highlightPlayerMoves() {\n    const currentPlayer = this.props.currentPlayer;\n    const CELL_SIZE = this.state.CELL_SIZE;\n    const mapContext = this.state.canvasContext;\n    mapContext.fillStyle = 'rgba(0,125,255,0.25)';\n    currentPlayer.availableMoves.forEach(move => {\n      mapContext.beginPath();\n      mapContext.rect(\n        (move.x * CELL_SIZE) + 1, \n        (move.y * CELL_SIZE) + 1, \n        CELL_SIZE - 2, \n        CELL_SIZE - 2);\n      mapContext.fill();\n      mapContext.closePath();\n    });\n  }\n\n  showAddPlayerModal(modalId) {\n    const modal = document.getElementById(modalId);\n    modal.style.visibility = 'visible';\n    modal.style.display = 'block';\n  }\n\n  addNewPlayer() {\n    const gameBoard = this.state.data;\n    const currentPlayers = this.state.players;\n    const modal = document.getElementById(this.state.ADD_PLAYER_MODAL);\n    const xInput = document.getElementById('player-start-x');\n    const yInput = document.getElementById('player-start-y');\n    const targetCell = {\n      x: Number(xInput.value),\n      y: Number(yInput.value),\n    };\n    xInput.value = '';\n    yInput.value = '';\n    modal.style.visibility = 'hidden';\n    modal.style.display = 'none';\n    const newPlayer = new Player({\n      currentLocation: targetCell,\n    });\n    gameBoard.getData(targetCell).pushContents(newPlayer);\n    currentPlayers.push({\n      playerNum: (currentPlayers.length + 1),\n      player: newPlayer,\n    });\n    this.setState({\n      gameBoard: this.gameBoard,\n      players: currentPlayers,\n    });\n    if(gameBoard.getActiveCell() === undefined){\n      gameBoard.setActiveCell(gameBoard.getData(targetCell));\n      gameBoard.activeCell.toggleActive();\n    };\n    this.drawPlayer(targetCell, newPlayer);\n    this.props.addPlayerToGame(newPlayer);\n    \n    // debugging\n    // console.log(gameBoard);\n  }\n\n  render() {\n    return (\n      <div>\n        <canvas id='map' height={this.props.canvasHeight} \n            width={this.props.canvasWidth} onClick={this.handleClick}></canvas>\n        <div style={{ 'display': 'flex', 'justifyContent': 'center' }}>\n          <button className='nes-btn is-primary' onClick={ () => { this.showAddPlayerModal(this.state.ADD_PLAYER_MODAL) } }>Add Player</button>\n        </div>\n        <AddPlayerModal id={ this.state.ADD_PLAYER_MODAL } addNewPlayer={ this.addNewPlayer }/>\n      </div>\n    )\n  }\n};\n","import React, { Component } from 'react';\nimport './Panel.css';\n\nexport default class Panel extends Component {\n  render() {\n    return (\n      <div className='panel' style={{'width': this.props.width}}>\n        {this.props.children}\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport GameBoard from '../../components/GameBoard';\nimport Panel from '../../components/Panel';\n\nimport './style.css';\n\nexport default class Home extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      players: [],\n      playerTurn: undefined,\n      activePlayer: undefined,\n    };\n\n    this.addPlayerToGame = this.addPlayerToGame.bind(this);\n    this.nextTurn = this.nextTurn.bind(this);\n    this.getCurrentPlayer = this.getCurrentPlayer.bind(this);\n  }\n  \n  initializePlayers() {\n    this.setState({\n      playerTurn: 1,\n    });\n  }\n\n  async addPlayerToGame(newPlayer) {\n    const tempPlayers = this.state.players;\n    if(this.state.players.length === 0) { \n      this.initializePlayers(); \n      this.setState({\n        activePlayer: newPlayer,\n      });\n    }\n    if(!this.state.players.includes(newPlayer)) { \n      tempPlayers.push(newPlayer);\n      this.setState({\n        players: tempPlayers,\n      });\n    }\n  }\n\n  getCurrentPlayer() {\n    return this.state.activePlayer;\n  }\n\n  nextTurn() {\n    const currentTurn = this.state.playerTurn;\n    if(currentTurn === this.state.players.length){\n      this.setState({\n        playerTurn: 1,\n        activePlayer: this.state.players[0],\n      });\n      return;\n    }\n    this.setState({\n      playerTurn: (currentTurn + 1),\n      activePlayer: this.state.players[currentTurn],\n    });\n    return;\n  }\n\n  render() {\n    return (\n      <div>\n        <Panel>\n          <span className='nes-text'>\n            PLAYER TURN: { this.state.playerTurn }\n          </span>\n          <br /><br /><br />\n          <button id='next-turn-button' className='nes-btn is-primary' onClick={ this.nextTurn }>Next Turn</button>\n        </Panel>\n        <GameBoard \n            boardX = { 10 }\n            boardY = { 10 }\n            canvasWidth = { 850 }\n            canvasHeight = { 850 }\n            addPlayerToGame = { this.addPlayerToGame } \n            playerTurn = { this.state.playerTurn } \n            currentPlayer = {this.getCurrentPlayer() } />\n      </div>      \n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Routes from './Routes';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nReactDOM.render(<Routes />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Home from './routes/Home/Home';\n\nexport default function Routes() {\n  return (\n    <Router>\n      <Route exact path='/' render={() => \n        <Home />\n      }/>\n    </Router>\n  );\n}\n"],"sourceRoot":""}